/*
 * Copyright (C) 2011 - 2020, MyWarp team and contributors
 *
 * This file is part of MyWarp.
 *
 * MyWarp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MyWarp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MyWarp. If not, see <http://www.gnu.org/licenses/>.
 */


buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.mendhak.gradlecrowdin:com.mendhak.gradlecrowdin.gradle.plugin:0.1.1"
    }
}
apply plugin: com.mendhak.gradlecrowdin.CrowdinPlugin

//variables
def crowdinApiKey = rootProject.resolveProperty("CROWDIN_KEY", null)
def crowdinTempDir = "$buildDir/tmp/crowdin"
def translationPackage = "io/github/mywarp/mywarp/lang"
def translationOutputDir = new File(sourceSets.main.output.resourcesDir, translationPackage)

//download i18n files from crowdin using the plugin
//REVIEW replace legacy plugin with self written code
crowdinDownload {
    projectId = "mywarp"
    apiKey = crowdinApiKey
    destination = crowdinTempDir
}
crowdinDownload.onlyIf { crowdinApiKey != null }

task crowdinCopy(type: Copy) {
    description "Copies the files downloaded from crodwin to the appropiate destination"
    dependsOn(crowdinDownload)

    from crowdinTempDir
    into translationOutputDir
    include "**/" + project.name + "/**/*.properties"

    //copy files without their directories
    eachFile {
        path = name
    }
    includeEmptyDirs = false
}

task createDefaultLocalizations(type: Copy) {
    description "Creates the default i18n files (without extension) from the bundled English files (with '_en' extension)"

    from "src/main/resources/$translationPackage"
    into translationOutputDir

    include("*.properties")
    exclude("*_*.properties")

    rename { fileName -> fileName.replace(".", "_en.") }
}

///configure tasks dependencies
processResources.dependsOn(crowdinCopy)
processResources.dependsOn(createDefaultLocalizations)
