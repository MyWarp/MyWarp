/*
 * Copyright (C) 2011 - 2020, MyWarp team and contributors
 *
 * This file is part of MyWarp.
 *
 * MyWarp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MyWarp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MyWarp. If not, see <http://www.gnu.org/licenses/>.
 */

import groovy.json.JsonOutput

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.ajoberstar.grgit:grgit-gradle:4.1.0"
        classpath "org.ajoberstar:gradle-git-publish:3.0.0"
    }
}
apply plugin: org.ajoberstar.grgit.gradle.GrgitPlugin
apply plugin: org.ajoberstar.gradle.git.publish.GitPublishPlugin

gitPublish {
    def artifactDir = "source/files/${rootProject.buildNumber}_${rootProject.commitHash}"
    def dataDir = "data/builds"

    // authentication is handled using a token that is available as an environment variable (GRGIT_USER),
    // see http://ajoberstar.org/grgit/grgit-authentication.html
    // we skip the task if the token is missing

    repoUri = "https://github.com/MyWarp/mywarp.github.io.git"
    branch = "src"

    contents {
        from ("mywarp-bukkit/build/libs") {
            include "mywarp-bukkit*.jar"
            exclude "*javadoc*.jar"
            exclude "*sources*.jar"
            into artifactDir
        }
        from ("mywarp-core/build/libs") {
            include "mywarp-core*.jar"
            exclude "*javadoc*.jar"
            exclude "*sources*.jar"
            into artifactDir
        }
        from ("$buildDir/tmp/") {
            include "version.json"
            rename {filename -> "${rootProject.buildNumber}_${rootProject.commitHash}.json"}
            into dataDir
        }
    }

    preserve {
        include "**"
    }

    commitMessage = "Automatic deployment of binaries from build #$buildNumber."
}
gitPublishPush.onlyIf { System.env.GRGIT_USER != null && project.name == "MyWarp" }

task createVersionJson() {
    def head = grgit.head()
    def gitTag = grgit.tag.list().find { it.commit == head }?.name ?: ""


    def data = [
            build: [
                    by: rootProject.ciSystem,
                    number: rootProject.buildNumber,
                    successful: "true", //REVIEW do we really need this?
                    date: new Date().format("dd/MM/YYYY").toString()
            ],
            version: [
                    shortVersion: project.version,
                    longVersion: project.internalVersion
            ],
            commit: [
                    short_hash: rootProject.commitHash,
                    message: head.shortMessage,
                    author: head.author.name,
                    tag: gitTag,
            ]
    ]
    def json = JsonOutput.prettyPrint(JsonOutput.toJson(data))
    File file = new File(buildDir, "/tmp/version.json")
    file.getParentFile().mkdirs()
    file.write(json)
}
gitPublishReset.dependsOn(createVersionJson)


