plugins {
    id "com.palantir.git-version" version "0.13.0"
}

// build configuration
if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

tasks.withType(JavaCompile) {
    options.forkOptions.jvmArgs.addAll([
        '--add-exports', 'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED'
    ])
}

ext.resolveProperty = { key, defaultValue = "unknown" ->
    return project.findProperty(key) ?: System.getenv(key) ?: defaultValue
}

// define variables
ext.buildNumber = resolveProperty("BUILD_NUMBER")
ext.ciSystem = resolveProperty("CI_SYSTEM").replaceAll(" ", "_")
ext.commitHash = resolveProperty("COMMIT_HASH", versionDetails().gitHash)

allprojects {
    group = "io.github.mywarp.mywarp"
    version = "3.1.3-SNAPSHOT"

    // general project information
    ext.projectName = "MyWarp"
    ext.internalVersion = "${version}+${ciSystem}-b${buildNumber}.git-${commitHash}"
    ext.url = "https://mywarp.github.io/"
    ext.inceptionYear = "2011"
    ext.projectDescription = "An extension for Minecraft that allows players to create and share warps."
}
apply from: "${rootProject.projectDir}/gradle/publishOnGithub.gradle"

subprojects {
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply from: "${rootProject.projectDir}/gradle/i18n.gradle"

    sourceCompatibility = 8
    targetCompatibility = 8

    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    jar {
        from new File(rootProject.projectDir, "LICENSE.txt")

        manifest.mainAttributes(
                "Built-By": System.properties["user.name"],
                "Created-By": System.properties["java.vm.version"] + " (" + System.properties["java.vm.vendor"] + ")",
                "Implementation-Title": name,
                "Implementation-Version": internalVersion,
                "Implementation-Vendor": url)
    }

    javadoc {
        options.setEncoding("UTF-8")

        if (JavaVersion.current().isJava8Compatible()) {
            // disable the super-strict doclint tool in Java 8
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }
}
